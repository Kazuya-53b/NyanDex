<%= form_with(model: @cat, local: true, html: { multipart: true }) do |form| %>
  <% if @cat.errors.any? %>
    <div class="error-message mb-4">
      <ul class="list-disc pl-5" style="list-style-type: none; padding: 0; margin: 0;">
        <% @cat.errors.full_messages.each do |message| %>
          <li><%= message %></li>
        <% end %>
      </ul>
    </div>
  <% end %>

  <!-- Step 1: 画像トリミング -->
  <div id="step-1" class="p-6 bg-white border-4 border-gray-300 rounded-lg mb-6 w-5/6 sm:w-full mx-auto box-border">
    <div class="mb-4 relative">
      <%= form.label :images, t('form.labels.images'), class: 'block text-gray-700 text-sm font-bold mb-2' %>
      <%= form.file_field :images, accept: 'image/*', multiple: true, id: 'cat_images', class: 'hidden' %>
      <label for="cat_images" class="cursor-pointer block text-sm text-gray-900 border border-gray-200 rounded-lg focus:outline-none focus:border-indigo-500 p-2 w-full">
        画像を選択
      </label>
    </div>

    <div id="image-preview-container" style="display: none;" class="mb-4">
      <img id="image-preview" src="" alt="Image Preview" class="max-w-full border rounded-lg" />
    </div>

    <button type="button" id="crop-button" style="display: none;" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
      トリミング
    </button>

    <div id="preview-list" style="display: none;" class="mt-4">
      <h3 class="font-bold text-gray-700 mb-2">トリミング済み画像プレビュー</h3>
      <div id="cropped-images" class="grid grid-cols-2 xs:grid-cols-4 sm:grid-cols-4 md:grid-cols-4 gap-4"></div>
    </div>

    <%= form.hidden_field :cropped_images_data, id: 'cropped_images_data' %>

    <button type="button" id="next-step-button-1" class="mt-4 bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded">
      次へ
    </button>
  </div>

  <!-- Step 2: 猫の情報入力 -->
  <div id="step-2" style="display: none;" class="pt-5 pb-5 pl-20 pr-20 bg-white border-4 border-gray-200 rounded-lg mb-6">
    <div class="mb-4">
      <%= form.label :name, t('form.labels.name'), class: 'block text-gray-700 text-sm font-bold mb-2' %>
      <%= form.text_field :name, class: 'w-full px-3 py-2 text-gray-700 border rounded-lg focus:outline-none focus:border-indigo-500' %>
    </div>

    <div class="mb-4">
      <%= form.label :gender, t('form.labels.gender'), class: 'block text-gray-700 text-sm font-bold mb-2' %>
      <%= form.text_field :gender, class: 'w-full px-3 py-2 text-gray-700 border rounded-lg focus:outline-none focus:border-indigo-500' %>
    </div>

    <div class="mb-4">
      <%= form.label :age, t('form.labels.age'), class: 'block text-gray-700 text-sm font-bold mb-2' %>
      <%= form.number_field :age, class: 'w-full px-3 py-2 text-gray-700 border rounded-lg focus:outline-none focus:border-indigo-500' %>
    </div>

    <div class="mb-4">
      <%= form.label :breed, t('form.labels.breed'), class: 'block text-gray-700 text-sm font-bold mb-2' %>
      <%= form.text_field :breed, class: 'w-full px-3 py-2 text-gray-700 border rounded-lg focus:outline-none focus:border-indigo-500' %>
    </div>

    <div class="mb-4">
      <%= form.label :color, t('form.labels.color'), class: 'block text-gray-700 text-sm font-bold mb-2' %>
      <%= form.text_field :color, class: 'w-full px-3 py-2 text-gray-700 border rounded-lg focus:outline-none focus:border-indigo-500' %>
    </div>

    <div class="mb-4">
      <%= form.label :pattern, t('form.labels.pattern'), class: 'block text-gray-700 text-sm font-bold mb-2' %>
      <%= form.text_field :pattern, class: 'w-full px-3 py-2 text-gray-700 border rounded-lg focus:outline-none focus:border-indigo-500' %>
    </div>

    <div class="mb-4">
      <%= form.label :short_description, t('form.labels.short_description'), class: 'block text-gray-700 text-sm font-bold mb-2' %>
      <%= form.text_area :short_description, class: 'w-full px-3 py-2 text-gray-700 border rounded-lg focus:outline-none focus:border-indigo-500' %>
    </div>

    <div class="mb-4">
      <%= form.label :long_description, t('form.labels.long_description'), class: 'block text-gray-700 text-sm font-bold mb-2' %>
      <%= form.text_area :long_description, class: 'w-full px-3 py-2 text-gray-700 border rounded-lg focus:outline-none focus:border-indigo-500' %>
    </div>

    <button type="button" id="prev-step-button-2" class="bg-gray-600 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded">
      戻る
    </button>

    <%= form.submit '猫を登録', id: 'submit-button', class: 'bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded ml-2' %>
  </div>
<% end %>

<script>
  let cropper; 
  let currentIndex = 0;
  const croppedImages = [];
  let originalFile;

  document.addEventListener('DOMContentLoaded', function() {
      const myForm = document.querySelector('form');  // フォームをmyFormとして宣言
      let formSubmitted = false;  // フォーム送信後の状態を管理するフラグ

      // ページ離脱時の確認
      window.addEventListener('beforeunload', function(event) {
          // フォームが送信されておらず、フォームに変更がある場合のみダイアログを表示
          if (!formSubmitted && myForm && myForm.checkValidity() && myForm.elements.length > 0) {
              event.preventDefault();
              event.returnValue = '';  // 確認ダイアログを表示
          }
      });

      // フォーム送信時の処理
      myForm.addEventListener('submit', function(event) {
          const confirmation = confirm("フォームを送信してもよろしいですか？");
          if (confirmation) {
              formSubmitted = true;  // フォーム送信フラグを立てる
          } else {
              event.preventDefault();  // フォーム送信をキャンセル
          }
      });
  


    // ページが読み込まれたときにリセットする
    window.addEventListener('load', function() {
        if (shouldReset) {
            myForm.reset(); // フォームをリセット
            document.getElementById('cat_images').value = ''; // ファイル名をリセット
            croppedImages.length = 0; // 画像の配列をクリア
        }
    });

    const step1 = document.getElementById('step-1');
    const step2 = document.getElementById('step-2');
    const nextStepButton1 = document.getElementById('next-step-button-1');
    const prevStepButton2 = document.getElementById('prev-step-button-2');

    // 「次へ」ボタンのクリックでステップを進める
    nextStepButton1.addEventListener('click', function() {
      // トリミング済み画像が1つ以上あるか確認
      if (croppedImages.length === 0) {
        alert('画像を選択してください');
      } else {
        step1.style.display = 'none';
        step2.style.display = 'block';
      }
    });

    // 「戻る」ボタンのクリックで前のステップに戻る
    prevStepButton2.addEventListener('click', function() {
      step2.style.display = 'none';
      step1.style.display = 'block';
    });

    const form = document.querySelector('form'); // フォームを取得
    const submitButton = document.getElementById('submit-button');

    // 登録ボタンが押されたときに実行
    submitButton.addEventListener('click', function (event) {
      // 必須フィールドを取得
      const name = document.querySelector('[name="cat[name]"]');
      const age = document.querySelector('[name="cat[age]"]');
      const gender = document.querySelector('[name="cat[gender]"]');
      const shortDescription = document.querySelector('[name="cat[short_description]"]');
      const longDescription = document.querySelector('[name="cat[long_description]"]');

      // 必須項目のバリデーションチェック
      if (!name.value.trim()) {
        alert('名前を入力してください');
        event.preventDefault(); // フォーム送信をブロック
        return;
      }

      if (!gender.value.trim()) {
        alert('性別を入力してください');
        event.preventDefault(); // フォーム送信をブロック
        return;
      }

      if (!age.value.trim()) {
        alert('年齢を入力してください');
        event.preventDefault(); // フォーム送信をブロック
        return;
      }

      if (!shortDescription.value.trim()) {
        alert('にゃんこ紹介を入力してください');
        event.preventDefault(); // フォーム送信をブロック
        return;
      }

      if (!longDescription.value.trim()) {
        alert('にゃんこ紹介を入力してください');
        event.preventDefault(); // フォーム送信をブロック
        return;
      }
    });
  });

  document.getElementById('cat_images').addEventListener('change', function(event) {
    const files = event.target.files;
    if (files.length > 0) {
        currentIndex = 0; 
        originalFile = files[currentIndex]; 
        loadImage(originalFile); 
    }
  });

  function loadImage(file) {
    const reader = new FileReader();
    reader.onload = function(e) {
        const img = document.getElementById('image-preview');
        img.src = e.target.result;

        // Cropperのインスタンスを破棄
        if (cropper) {
            cropper.destroy();
        }

        // Cropperの初期化
        cropper = new Cropper(img, {
            aspectRatio: 1, // アスペクト比を1:1に設定
            viewMode: 1,
            autoCropArea: 1,
            responsive: true,
            ready: function () {
                const imageData = cropper.getImageData();
                const cropBoxData = {
                    left: (imageData.naturalWidth - imageData.naturalHeight) / 2,
                    top: 0,
                    width: imageData.naturalHeight,
                    height: imageData.naturalHeight,
                };
                cropper.setCropBoxData(cropBoxData);

                // プレビューエリアを画面中央にフォーカスする処理
                const previewContainer = document.getElementById('image-preview-container');
                const rect = previewContainer.getBoundingClientRect();
                const windowHeight = window.innerHeight;

                // スクロール位置を計算
                const scrollTop = rect.top + window.pageYOffset - (windowHeight / 2) + (rect.height / 2);

                // スクロール処理
                window.scrollTo({
                    top: scrollTop,
                    behavior: 'smooth'
                });
            },
        });

        document.getElementById('image-preview-container').style.display = 'block'; 
        document.getElementById('crop-button').style.display = 'block'; 
    };
    reader.readAsDataURL(file); 
  }

  document.getElementById('crop-button').addEventListener('click', function() {
      if (cropper && originalFile) {
          cropper.getCroppedCanvas({
              width: 300,
              height: 300
          }).toBlob((blob) => {
              if (!blob) {
                  console.error('トリミングに失敗しました。blobがnullです。');
                  return;
              }
              const fileReader = new FileReader();
              fileReader.onload = function() {
                  const base64Data = fileReader.result;  // Base64データ
                  croppedImages.push(base64Data);  // Base64を保存
                  document.getElementById('cropped_images_data').value = JSON.stringify(croppedImages); // hidden fieldにセット

                  const previewContainer = document.getElementById('cropped-images');
                
                  // 画像を包むラッパー要素を作成
                  const wrapper = document.createElement('div');
                  wrapper.style.position = 'relative'; // 相対位置
                  wrapper.style.display = 'inline-block'; // 画像の横に並ぶように
                  wrapper.style.marginRight = '10px'; // 右のマージン

                  // 画像要素を作成
                  const imgElement = document.createElement('img');
                  imgElement.src = base64Data;
                  imgElement.style.maxWidth = '100px';

                  // ごみ箱ボタンを作成
                  const trashButton = document.createElement('button');
                  trashButton.innerHTML = '<i class="fas fa-trash"></i>'; // FontAwesomeのアイコン
                  trashButton.style.position = 'absolute'; // 絶対位置
                  trashButton.style.bottom = '0px';
                  trashButton.style.right = '0px';
                  trashButton.style.border = 'none';
                  trashButton.style.backgroundColor = 'red'; // 赤色に設定
                  trashButton.style.color = 'white'; // アイコンの色を白に設定
                  trashButton.style.cursor = 'pointer';
                  trashButton.style.zIndex = '10'; // ボタンを前面に表示
                  trashButton.style.borderRadius = '2px'; // 角丸の四角にする
                  trashButton.style.padding = '2px 2px'; // ボタンにパディングを追加

                  // ごみ箱ボタンのクリックイベント
                  trashButton.addEventListener('click', function() {
                      const index = croppedImages.indexOf(base64Data);
                      if (index > -1) {
                          // 配列から削除
                          croppedImages.splice(index, 1);
                          // hidden fieldも更新
                          document.getElementById('cropped_images_data').value = JSON.stringify(croppedImages);
                          // プレビューから削除
                          previewContainer.removeChild(wrapper);
                      }
                  });

                  // ラッパーに画像とボタンを追加
                  wrapper.appendChild(imgElement);
                  wrapper.appendChild(trashButton); // ボタンをラッパー内に追加

                  // プレビューにラッパーを追加
                  previewContainer.appendChild(wrapper);

                  document.getElementById('image-preview-container').style.display = 'none';
                  document.getElementById('crop-button').style.display = 'none';

                  // 次の画像があればロード
                  if (currentIndex < document.getElementById('cat_images').files.length - 1) {
                      currentIndex++;
                      const files = document.getElementById('cat_images').files;
                      originalFile = files[currentIndex];
                      loadImage(originalFile);

                      // トリミングエリアを中央にフォーカス
                      setTimeout(() => {
                          const previewContainer = document.getElementById('image-preview-container');
                          const rect = previewContainer.getBoundingClientRect();
                          window.scrollTo({
                              top: rect.top + window.pageYOffset - (window.innerHeight / 2) + (rect.height / 2),
                              behavior: 'smooth'
                          });
                      }, 100); // 少し待ってからスクロールする
                  } else {
                      document.getElementById('preview-list').style.display = 'block';
                  }
              };
              fileReader.readAsDataURL(blob);  // BlobをBase64に変換
          });
      }
  });

  document.querySelector('form').addEventListener('submit', function(event) {
    const dataTransfer = new DataTransfer();
  
    // トリミングされた画像のみを追加
    croppedImages.forEach((imgFile) => {
      if (imgFile) {
        dataTransfer.items.add(imgFile);
      }
    });

    // cat_imagesフィールドにトリミングした画像をセット
    document.getElementById('cat_images').files = dataTransfer.files; 
  });
</script>
